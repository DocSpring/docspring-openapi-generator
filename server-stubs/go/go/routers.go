/*
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/api/v1/",
		Index,
	},

	{
		"BatchGeneratePDF",
		strings.ToUpper("Post"),
		"/api/v1/templates/{template_id}/submissions/batch",
		BatchGeneratePDF,
	},

	{
		"CombineSubmissions",
		strings.ToUpper("Post"),
		"/api/v1/combined_submissions",
		CombineSubmissions,
	},

	{
		"ExpireCombinedSubmission",
		strings.ToUpper("Delete"),
		"/api/v1/combined_submissions/{combined_submission_id}",
		ExpireCombinedSubmission,
	},

	{
		"ExpireSubmission",
		strings.ToUpper("Delete"),
		"/api/v1/submissions/{submission_id}",
		ExpireSubmission,
	},

	{
		"GeneratePDF",
		strings.ToUpper("Post"),
		"/api/v1/templates/{template_id}/submissions",
		GeneratePDF,
	},

	{
		"GetCombinedSubmission",
		strings.ToUpper("Get"),
		"/api/v1/combined_submissions/{combined_submission_id}",
		GetCombinedSubmission,
	},

	{
		"GetSubmission",
		strings.ToUpper("Get"),
		"/api/v1/submissions/{submission_id}",
		GetSubmission,
	},

	{
		"GetTemplates",
		strings.ToUpper("Get"),
		"/api/v1/templates",
		GetTemplates,
	},

	{
		"TestAuthentication",
		strings.ToUpper("Get"),
		"/api/v1/authentication",
		TestAuthentication,
	},
}
