=begin
{{> api_info}}
=end

require 'spec_helper'
require 'json'

# Unit tests for {{moduleName}}::{{classname}}
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
{{#operations}}describe '{{classname}}' do
  before do
    {{moduleName}}.configure do |c|
      c.username  = 'api_token123'
      c.password  = 'testsecret123'
      c.host = 'localhost:31337'
      c.scheme = 'http'
    end
  end

  let(:api_instance) { {{moduleName}}::{{classname}}.new }

  after do
    # run after each test
  end

  describe 'test an instance of {{classname}}' do
    it 'should create an instance of {{classname}}' do
      expect(api_instance).to be_instance_of({{moduleName}}::{{classname}})
    end
  end

{{#operation}}
  # integration tests for {{operationId}}
  {{#summary}}
  # {{summary}}
  {{/summary}}
  {{#notes}}
  # {{notes}}
  {{/notes}}
{{#allParams}}{{#required}}  # @param {{paramName}} {{description}}
{{/required}}{{/allParams}}  # @param [Hash] opts the optional parameters
{{#allParams}}{{^required}}  # @option opts [{{{dataType}}}] :{{paramName}} {{description}}
{{/required}}{{/allParams}}  # @return [{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}nil{{/returnType}}]
  describe '{{operationId}} test' do
    it 'should work' do
      {{#requiredParams}}
      {{{paramName}}} = {{{example}}} # {{{dataType}}} | {{{description}}}
      {{/requiredParams}}
      {{#optionalParams}}
      {{#-first}}
      opts = {
      {{/-first}}
        {{{paramName}}}: {{{example}}}{{^-last}},{{/-last}} # {{{dataType}}} | {{{description}}}
      {{#-last}}
      }
      {{/-last}}
      {{/optionalParams}}
      {{#returnType}}result = {{/returnType}}api_instance.{{{operationId}}}{{#hasParams}}({{#requiredParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#optionalParams}}{{#-last}}{{#hasRequiredParams}}, {{/hasRequiredParams}}opts{{/-last}}{{/optionalParams}}){{/hasParams}}
      expect(result).to_not be_nil
    end
  end
{{/operation}}
end
{{/operations}}
