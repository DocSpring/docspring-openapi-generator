# coding: utf-8

"""
    API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse201(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'combined_submission': 'InlineResponse201CombinedSubmission'
    }

    attribute_map = {
        'status': 'status',
        'combined_submission': 'combined_submission'
    }

    def __init__(self, status=None, combined_submission=None):
        """
        InlineResponse201 - a model defined in Swagger
        """

        self._status = None
        self._combined_submission = None
        self.discriminator = None

        self.status = status
        if combined_submission is not None:
          self.combined_submission = combined_submission

    @property
    def status(self):
        """
        Gets the status of this InlineResponse201.

        :return: The status of this InlineResponse201.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse201.

        :param status: The status of this InlineResponse201.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["success", "error"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def combined_submission(self):
        """
        Gets the combined_submission of this InlineResponse201.

        :return: The combined_submission of this InlineResponse201.
        :rtype: InlineResponse201CombinedSubmission
        """
        return self._combined_submission

    @combined_submission.setter
    def combined_submission(self, combined_submission):
        """
        Sets the combined_submission of this InlineResponse201.

        :param combined_submission: The combined_submission of this InlineResponse201.
        :type: InlineResponse201CombinedSubmission
        """

        self._combined_submission = combined_submission

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
