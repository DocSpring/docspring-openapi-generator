/* 
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FormApi.Client.Client;
using FormApi.Client.Model;

namespace FormApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        List<CreateSubmissionResponse> BatchGeneratePDF (string templateId, List<CreateSubmissionData> createSubmissionData);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        ApiResponse<List<CreateSubmissionResponse>> BatchGeneratePDFWithHttpInfo (string templateId, List<CreateSubmissionData> createSubmissionData);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombineSubmissions (CombinedSubmissionData combinedSubmissionData = null);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo (CombinedSubmissionData combinedSubmissionData = null);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission ExpireCombinedSubmission (string combinedSubmissionId);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        Submission ExpireSubmission (string submissionId);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> ExpireSubmissionWithHttpInfo (string submissionId);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>CreateSubmissionResponse</returns>
        CreateSubmissionResponse GeneratePDF (string templateId, CreateSubmissionData createSubmissionData);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        ApiResponse<CreateSubmissionResponse> GeneratePDFWithHttpInfo (string templateId, CreateSubmissionData createSubmissionData);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission GetCombinedSubmission (string combinedSubmissionId);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        Submission GetSubmission (string submissionId);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> GetSubmissionWithHttpInfo (string submissionId);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> GetTemplates (int? page = null, int? perPage = null);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> GetTemplatesWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationSuccessResponse</returns>
        AuthenticationSuccessResponse TestAuthentication ();

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        ApiResponse<AuthenticationSuccessResponse> TestAuthenticationWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePDFAsync (string templateId, List<CreateSubmissionData> createSubmissionData);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePDFAsyncWithHttpInfo (string templateId, List<CreateSubmissionData> createSubmissionData);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync (CombinedSubmissionData combinedSubmissionData = null);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsAsyncWithHttpInfo (CombinedSubmissionData combinedSubmissionData = null);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync (string combinedSubmissionId);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync (string submissionId);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> ExpireSubmissionAsyncWithHttpInfo (string submissionId);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync (string templateId, CreateSubmissionData createSubmissionData);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePDFAsyncWithHttpInfo (string templateId, CreateSubmissionData createSubmissionData);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync (string combinedSubmissionId);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync (string submissionId);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionAsyncWithHttpInfo (string submissionId);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> GetTemplatesAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetTemplatesAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync ();

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PDFApi : IPDFApi
    {
        private FormApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi(String basePath)
        {
            this.Configuration = new FormApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = FormApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PDFApi(FormApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = FormApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FormApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FormApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FormApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        public List<CreateSubmissionResponse> BatchGeneratePDF (string templateId, List<CreateSubmissionData> createSubmissionData)
        {
             ApiResponse<List<CreateSubmissionResponse>> localVarResponse = BatchGeneratePDFWithHttpInfo(templateId, createSubmissionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        public ApiResponse< List<CreateSubmissionResponse> > BatchGeneratePDFWithHttpInfo (string templateId, List<CreateSubmissionData> createSubmissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePDF");
            // verify the required parameter 'createSubmissionData' is set
            if (createSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'createSubmissionData' when calling PDFApi->BatchGeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (createSubmissionData != null && createSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CreateSubmissionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CreateSubmissionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CreateSubmissionResponse>)));
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePDFAsync (string templateId, List<CreateSubmissionData> createSubmissionData)
        {
             ApiResponse<List<CreateSubmissionResponse>> localVarResponse = await BatchGeneratePDFAsyncWithHttpInfo(templateId, createSubmissionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePDFAsyncWithHttpInfo (string templateId, List<CreateSubmissionData> createSubmissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePDF");
            // verify the required parameter 'createSubmissionData' is set
            if (createSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'createSubmissionData' when calling PDFApi->BatchGeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (createSubmissionData != null && createSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CreateSubmissionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CreateSubmissionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CreateSubmissionResponse>)));
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombineSubmissions (CombinedSubmissionData combinedSubmissionData = null)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombineSubmissionsWithHttpInfo(combinedSubmissionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public ApiResponse< CreateCombinedSubmissionResponse > CombineSubmissionsWithHttpInfo (CombinedSubmissionData combinedSubmissionData = null)
        {

            var localVarPath = "/combined_submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionData != null && combinedSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinedSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinedSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombineSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync (CombinedSubmissionData combinedSubmissionData = null)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombineSubmissionsAsyncWithHttpInfo(combinedSubmissionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsAsyncWithHttpInfo (CombinedSubmissionData combinedSubmissionData = null)
        {

            var localVarPath = "/combined_submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionData != null && combinedSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinedSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinedSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombineSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission ExpireCombinedSubmission (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = ExpireCombinedSubmissionWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public ApiResponse< CombinedSubmission > ExpireCombinedSubmissionWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = await ExpireCombinedSubmissionAsyncWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        public Submission ExpireSubmission (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = ExpireSubmissionWithHttpInfo(submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        public ApiResponse< Submission > ExpireSubmissionWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = await ExpireSubmissionAsyncWithHttpInfo(submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submission>> ExpireSubmissionAsyncWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>CreateSubmissionResponse</returns>
        public CreateSubmissionResponse GeneratePDF (string templateId, CreateSubmissionData createSubmissionData)
        {
             ApiResponse<CreateSubmissionResponse> localVarResponse = GeneratePDFWithHttpInfo(templateId, createSubmissionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        public ApiResponse< CreateSubmissionResponse > GeneratePDFWithHttpInfo (string templateId, CreateSubmissionData createSubmissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            // verify the required parameter 'createSubmissionData' is set
            if (createSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'createSubmissionData' when calling PDFApi->GeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (createSubmissionData != null && createSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionResponse)));
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync (string templateId, CreateSubmissionData createSubmissionData)
        {
             ApiResponse<CreateSubmissionResponse> localVarResponse = await GeneratePDFAsyncWithHttpInfo(templateId, createSubmissionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="createSubmissionData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePDFAsyncWithHttpInfo (string templateId, CreateSubmissionData createSubmissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            // verify the required parameter 'createSubmissionData' is set
            if (createSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'createSubmissionData' when calling PDFApi->GeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (createSubmissionData != null && createSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionResponse)));
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission GetCombinedSubmission (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = GetCombinedSubmissionWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public ApiResponse< CombinedSubmission > GetCombinedSubmissionWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = await GetCombinedSubmissionAsyncWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        public Submission GetSubmission (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = GetSubmissionWithHttpInfo(submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        public ApiResponse< Submission > GetSubmissionWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> GetSubmissionAsync (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = await GetSubmissionAsyncWithHttpInfo(submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionAsyncWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> GetTemplates (int? page = null, int? perPage = null)
        {
             ApiResponse<List<Template>> localVarResponse = GetTemplatesWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > GetTemplatesWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> GetTemplatesAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<List<Template>> localVarResponse = await GetTemplatesAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetTemplatesAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationSuccessResponse</returns>
        public AuthenticationSuccessResponse TestAuthentication ()
        {
             ApiResponse<AuthenticationSuccessResponse> localVarResponse = TestAuthenticationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        public ApiResponse< AuthenticationSuccessResponse > TestAuthenticationWithHttpInfo ()
        {

            var localVarPath = "/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAuthentication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationSuccessResponse)));
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync ()
        {
             ApiResponse<AuthenticationSuccessResponse> localVarResponse = await TestAuthenticationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="FormApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationAsyncWithHttpInfo ()
        {

            var localVarPath = "/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAuthentication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationSuccessResponse)));
        }

    }
}
