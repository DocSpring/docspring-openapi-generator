/* 
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FormApi.Client.Client.OpenAPIDateConverter;

namespace FormApi.Client.Model
{
    /// <summary>
    /// CreateSubmissionDataRequestTokenResponseToken
    /// </summary>
    [DataContract]
    public partial class CreateSubmissionDataRequestTokenResponseToken :  IEquatable<CreateSubmissionDataRequestTokenResponseToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubmissionDataRequestTokenResponseToken" /> class.
        /// </summary>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="id">id.</param>
        /// <param name="secret">secret.</param>
        /// <param name="dataRequestUrl">dataRequestUrl.</param>
        public CreateSubmissionDataRequestTokenResponseToken(string expiresAt = default(string), string id = default(string), string secret = default(string), string dataRequestUrl = default(string))
        {
            this.ExpiresAt = expiresAt;
            this.Id = id;
            this.Secret = secret;
            this.DataRequestUrl = dataRequestUrl;
        }
        
        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets DataRequestUrl
        /// </summary>
        [DataMember(Name="data_request_url", EmitDefaultValue=false)]
        public string DataRequestUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubmissionDataRequestTokenResponseToken {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  DataRequestUrl: ").Append(DataRequestUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubmissionDataRequestTokenResponseToken);
        }

        /// <summary>
        /// Returns true if CreateSubmissionDataRequestTokenResponseToken instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubmissionDataRequestTokenResponseToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubmissionDataRequestTokenResponseToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.DataRequestUrl == input.DataRequestUrl ||
                    (this.DataRequestUrl != null &&
                    this.DataRequestUrl.Equals(input.DataRequestUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.DataRequestUrl != null)
                    hashCode = hashCode * 59 + this.DataRequestUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
