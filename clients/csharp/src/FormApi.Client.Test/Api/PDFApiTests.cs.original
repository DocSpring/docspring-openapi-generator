/* 
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using FormApi.Client.Client;
using FormApi.Client.Api;
using FormApi.Client.Model;

namespace FormApi.Client.Test
{
    /// <summary>
    ///  Class for testing PDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PDFApiTests
    {
        private PDFApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PDFApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PDFApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PDFApi
            //Assert.IsInstanceOfType(typeof(PDFApi), instance, "instance is a PDFApi");
        }

        
        /// <summary>
        /// Test BatchGeneratePdfV1
        /// </summary>
        [Test]
        public void BatchGeneratePdfV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //List<CreateSubmissionDataBatchV1> createSubmissionDataBatchV1 = null;
            //var response = instance.BatchGeneratePdfV1(templateId, createSubmissionDataBatchV1);
            //Assert.IsInstanceOf<List<CreateSubmissionResponse>> (response, "response is List<CreateSubmissionResponse>");
        }
        
        /// <summary>
        /// Test BatchGeneratePdfs
        /// </summary>
        [Test]
        public void BatchGeneratePdfsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmissionBatchData submissionBatchData = null;
            //var response = instance.BatchGeneratePdfs(submissionBatchData);
            //Assert.IsInstanceOf<CreateSubmissionBatchResponse> (response, "response is CreateSubmissionBatchResponse");
        }
        
        /// <summary>
        /// Test CombineSubmissions
        /// </summary>
        [Test]
        public void CombineSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CombinedSubmissionData combinedSubmissionData = null;
            //var response = instance.CombineSubmissions(combinedSubmissionData);
            //Assert.IsInstanceOf<CreateCombinedSubmissionResponse> (response, "response is CreateCombinedSubmissionResponse");
        }
        
        /// <summary>
        /// Test CreateDataRequestToken
        /// </summary>
        [Test]
        public void CreateDataRequestTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.CreateDataRequestToken(dataRequestId);
            //Assert.IsInstanceOf<CreateSubmissionDataRequestTokenResponse> (response, "response is CreateSubmissionDataRequestTokenResponse");
        }
        
        /// <summary>
        /// Test ExpireCombinedSubmission
        /// </summary>
        [Test]
        public void ExpireCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.ExpireCombinedSubmission(combinedSubmissionId);
            //Assert.IsInstanceOf<CombinedSubmission> (response, "response is CombinedSubmission");
        }
        
        /// <summary>
        /// Test ExpireSubmission
        /// </summary>
        [Test]
        public void ExpireSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //var response = instance.ExpireSubmission(submissionId);
            //Assert.IsInstanceOf<Submission> (response, "response is Submission");
        }
        
        /// <summary>
        /// Test GeneratePDF
        /// </summary>
        [Test]
        public void GeneratePDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //CreateSubmissionData createSubmissionData = null;
            //var response = instance.GeneratePDF(templateId, createSubmissionData);
            //Assert.IsInstanceOf<CreateSubmissionResponse> (response, "response is CreateSubmissionResponse");
        }
        
        /// <summary>
        /// Test GetCombinedSubmission
        /// </summary>
        [Test]
        public void GetCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.GetCombinedSubmission(combinedSubmissionId);
            //Assert.IsInstanceOf<CombinedSubmission> (response, "response is CombinedSubmission");
        }
        
        /// <summary>
        /// Test GetDataRequest
        /// </summary>
        [Test]
        public void GetDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.GetDataRequest(dataRequestId);
            //Assert.IsInstanceOf<SubmissionDataRequest> (response, "response is SubmissionDataRequest");
        }
        
        /// <summary>
        /// Test GetSubmission
        /// </summary>
        [Test]
        public void GetSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //var response = instance.GetSubmission(submissionId);
            //Assert.IsInstanceOf<Submission> (response, "response is Submission");
        }
        
        /// <summary>
        /// Test GetSubmissionBatch
        /// </summary>
        [Test]
        public void GetSubmissionBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionBatchId = null;
            //bool? includeSubmissions = null;
            //var response = instance.GetSubmissionBatch(submissionBatchId, includeSubmissions);
            //Assert.IsInstanceOf<SubmissionBatch> (response, "response is SubmissionBatch");
        }
        
        /// <summary>
        /// Test GetTemplates
        /// </summary>
        [Test]
        public void GetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetTemplates(page, perPage);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TestAuthentication
        /// </summary>
        [Test]
        public void TestAuthenticationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestAuthentication();
            //Assert.IsInstanceOf<AuthenticationSuccessResponse> (response, "response is AuthenticationSuccessResponse");
        }
        
        /// <summary>
        /// Test UpdateDataRequest
        /// </summary>
        [Test]
        public void UpdateDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //UpdateSubmissionDataRequestData updateSubmissionDataRequestData = null;
            //var response = instance.UpdateDataRequest(dataRequestId, updateSubmissionDataRequestData);
            //Assert.IsInstanceOf<UpdateDataRequestResponse> (response, "response is UpdateDataRequestResponse");
        }
        
    }

}
