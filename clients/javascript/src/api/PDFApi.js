/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthenticationError', 'model/AuthenticationSuccessResponse', 'model/CombinedSubmission', 'model/CombinedSubmissionData', 'model/CreateCombinedSubmissionResponse', 'model/CreateSubmissionBatchResponse', 'model/CreateSubmissionBatchV1SubmissionsResponse', 'model/CreateSubmissionData', 'model/CreateSubmissionDataRequestTokenResponse', 'model/CreateSubmissionResponse', 'model/Error', 'model/InvalidRequest', 'model/Submission', 'model/SubmissionBatch', 'model/SubmissionBatchData', 'model/SubmissionDataRequest', 'model/Template'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthenticationError'), require('../model/AuthenticationSuccessResponse'), require('../model/CombinedSubmission'), require('../model/CombinedSubmissionData'), require('../model/CreateCombinedSubmissionResponse'), require('../model/CreateSubmissionBatchResponse'), require('../model/CreateSubmissionBatchV1SubmissionsResponse'), require('../model/CreateSubmissionData'), require('../model/CreateSubmissionDataRequestTokenResponse'), require('../model/CreateSubmissionResponse'), require('../model/Error'), require('../model/InvalidRequest'), require('../model/Submission'), require('../model/SubmissionBatch'), require('../model/SubmissionBatchData'), require('../model/SubmissionDataRequest'), require('../model/Template'));
  } else {
    // Browser globals (root is window)
    if (!root.FormAPI) {
      root.FormAPI = {};
    }
    root.FormAPI.PDFApi = factory(root.FormAPI.ApiClient, root.FormAPI.AuthenticationError, root.FormAPI.AuthenticationSuccessResponse, root.FormAPI.CombinedSubmission, root.FormAPI.CombinedSubmissionData, root.FormAPI.CreateCombinedSubmissionResponse, root.FormAPI.CreateSubmissionBatchResponse, root.FormAPI.CreateSubmissionBatchV1SubmissionsResponse, root.FormAPI.CreateSubmissionData, root.FormAPI.CreateSubmissionDataRequestTokenResponse, root.FormAPI.CreateSubmissionResponse, root.FormAPI.Error, root.FormAPI.InvalidRequest, root.FormAPI.Submission, root.FormAPI.SubmissionBatch, root.FormAPI.SubmissionBatchData, root.FormAPI.SubmissionDataRequest, root.FormAPI.Template);
  }
}(this, function(ApiClient, AuthenticationError, AuthenticationSuccessResponse, CombinedSubmission, CombinedSubmissionData, CreateCombinedSubmissionResponse, CreateSubmissionBatchResponse, CreateSubmissionBatchV1SubmissionsResponse, CreateSubmissionData, CreateSubmissionDataRequestTokenResponse, CreateSubmissionResponse, Error, InvalidRequest, Submission, SubmissionBatch, SubmissionBatchData, SubmissionDataRequest, Template) {
  'use strict';

  /**
   * PDF service.
   * @module api/PDFApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PDFApi. 
   * @alias module:api/PDFApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the batchGeneratePdfV1 operation.
     * @callback module:api/PDFApi~batchGeneratePdfV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateSubmissionBatchV1SubmissionsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates multiple PDFs
     * @param {String} templateId 
     * @param {Array.<CreateSubmissionData>} createSubmissionData 
     * @param {module:api/PDFApi~batchGeneratePdfV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateSubmissionBatchV1SubmissionsResponse>}
     */
    this.batchGeneratePdfV1 = function(templateId, createSubmissionData, callback) {
      var postBody = createSubmissionData;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling batchGeneratePdfV1");
      }

      // verify the required parameter 'createSubmissionData' is set
      if (createSubmissionData === undefined || createSubmissionData === null) {
        throw new Error("Missing the required parameter 'createSubmissionData' when calling batchGeneratePdfV1");
      }


      var pathParams = {
        'template_id': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CreateSubmissionBatchV1SubmissionsResponse];

      return this.apiClient.callApi(
        '/templates/{template_id}/submissions/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGeneratePdfs operation.
     * @callback module:api/PDFApi~batchGeneratePdfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates multiple PDFs
     * @param {module:model/SubmissionBatchData} submissionBatchData 
     * @param {module:api/PDFApi~batchGeneratePdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionBatchResponse}
     */
    this.batchGeneratePdfs = function(submissionBatchData, callback) {
      var postBody = submissionBatchData;

      // verify the required parameter 'submissionBatchData' is set
      if (submissionBatchData === undefined || submissionBatchData === null) {
        throw new Error("Missing the required parameter 'submissionBatchData' when calling batchGeneratePdfs");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSubmissionBatchResponse;

      return this.apiClient.callApi(
        '/submissions/batches', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the combineSubmissions operation.
     * @callback module:api/PDFApi~combineSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCombinedSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge generated PDFs together
     * @param {module:model/CombinedSubmissionData} combinedSubmissionData 
     * @param {module:api/PDFApi~combineSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCombinedSubmissionResponse}
     */
    this.combineSubmissions = function(combinedSubmissionData, callback) {
      var postBody = combinedSubmissionData;

      // verify the required parameter 'combinedSubmissionData' is set
      if (combinedSubmissionData === undefined || combinedSubmissionData === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionData' when calling combineSubmissions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCombinedSubmissionResponse;

      return this.apiClient.callApi(
        '/combined_submissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataRequestToken operation.
     * @callback module:api/PDFApi~createDataRequestTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionDataRequestTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new data request token for form authentication
     * @param {String} dataRequestId 
     * @param {module:api/PDFApi~createDataRequestTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionDataRequestTokenResponse}
     */
    this.createDataRequestToken = function(dataRequestId, callback) {
      var postBody = null;

      // verify the required parameter 'dataRequestId' is set
      if (dataRequestId === undefined || dataRequestId === null) {
        throw new Error("Missing the required parameter 'dataRequestId' when calling createDataRequestToken");
      }


      var pathParams = {
        'data_request_id': dataRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CreateSubmissionDataRequestTokenResponse;

      return this.apiClient.callApi(
        '/data_requests/{data_request_id}/tokens', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the expireCombinedSubmission operation.
     * @callback module:api/PDFApi~expireCombinedSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombinedSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire a combined submission
     * @param {String} combinedSubmissionId 
     * @param {module:api/PDFApi~expireCombinedSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombinedSubmission}
     */
    this.expireCombinedSubmission = function(combinedSubmissionId, callback) {
      var postBody = null;

      // verify the required parameter 'combinedSubmissionId' is set
      if (combinedSubmissionId === undefined || combinedSubmissionId === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionId' when calling expireCombinedSubmission");
      }


      var pathParams = {
        'combined_submission_id': combinedSubmissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CombinedSubmission;

      return this.apiClient.callApi(
        '/combined_submissions/{combined_submission_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the expireSubmission operation.
     * @callback module:api/PDFApi~expireSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire a PDF submission
     * @param {String} submissionId 
     * @param {module:api/PDFApi~expireSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    this.expireSubmission = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling expireSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Submission;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePDF operation.
     * @callback module:api/PDFApi~generatePDFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new PDF
     * @param {String} templateId 
     * @param {module:model/CreateSubmissionData} createSubmissionData 
     * @param {module:api/PDFApi~generatePDFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubmissionResponse}
     */
    this.generatePDF = function(templateId, createSubmissionData, callback) {
      var postBody = createSubmissionData;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling generatePDF");
      }

      // verify the required parameter 'createSubmissionData' is set
      if (createSubmissionData === undefined || createSubmissionData === null) {
        throw new Error("Missing the required parameter 'createSubmissionData' when calling generatePDF");
      }


      var pathParams = {
        'template_id': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSubmissionResponse;

      return this.apiClient.callApi(
        '/templates/{template_id}/submissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCombinedSubmission operation.
     * @callback module:api/PDFApi~getCombinedSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CombinedSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a combined submission (merged PDFs)
     * @param {String} combinedSubmissionId 
     * @param {module:api/PDFApi~getCombinedSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CombinedSubmission}
     */
    this.getCombinedSubmission = function(combinedSubmissionId, callback) {
      var postBody = null;

      // verify the required parameter 'combinedSubmissionId' is set
      if (combinedSubmissionId === undefined || combinedSubmissionId === null) {
        throw new Error("Missing the required parameter 'combinedSubmissionId' when calling getCombinedSubmission");
      }


      var pathParams = {
        'combined_submission_id': combinedSubmissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CombinedSubmission;

      return this.apiClient.callApi(
        '/combined_submissions/{combined_submission_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataRequest operation.
     * @callback module:api/PDFApi~getDataRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionDataRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Look up a submission data request
     * @param {String} dataRequestId 
     * @param {module:api/PDFApi~getDataRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmissionDataRequest}
     */
    this.getDataRequest = function(dataRequestId, callback) {
      var postBody = null;

      // verify the required parameter 'dataRequestId' is set
      if (dataRequestId === undefined || dataRequestId === null) {
        throw new Error("Missing the required parameter 'dataRequestId' when calling getDataRequest");
      }


      var pathParams = {
        'data_request_id': dataRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SubmissionDataRequest;

      return this.apiClient.callApi(
        '/data_requests/{data_request_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmission operation.
     * @callback module:api/PDFApi~getSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a PDF
     * @param {String} submissionId 
     * @param {module:api/PDFApi~getSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    this.getSubmission = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling getSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Submission;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionBatch operation.
     * @callback module:api/PDFApi~getSubmissionBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmissionBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of a submission batch job
     * @param {String} submissionBatchId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeSubmissions 
     * @param {module:api/PDFApi~getSubmissionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmissionBatch}
     */
    this.getSubmissionBatch = function(submissionBatchId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'submissionBatchId' is set
      if (submissionBatchId === undefined || submissionBatchId === null) {
        throw new Error("Missing the required parameter 'submissionBatchId' when calling getSubmissionBatch");
      }


      var pathParams = {
        'submission_batch_id': submissionBatchId
      };
      var queryParams = {
        'include_submissions': opts['includeSubmissions'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SubmissionBatch;

      return this.apiClient.callApi(
        '/submissions/batches/{submission_batch_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplates operation.
     * @callback module:api/PDFApi~getTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Template>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Default: 1
     * @param {Number} opts.perPage Default: 50
     * @param {module:api/PDFApi~getTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Template>}
     */
    this.getTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Template];

      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testAuthentication operation.
     * @callback module:api/PDFApi~testAuthenticationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Authentication
     * @param {module:api/PDFApi~testAuthenticationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationSuccessResponse}
     */
    this.testAuthentication = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_token_basic'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AuthenticationSuccessResponse;

      return this.apiClient.callApi(
        '/authentication', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
