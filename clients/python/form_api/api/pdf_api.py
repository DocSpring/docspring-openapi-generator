# coding: utf-8

"""
    API V1

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from form_api.api_client import ApiClient


class PDFApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_generate_pdf_v1(self, template_id, create_submission_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdf_v1(template_id, create_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param list[CreateSubmissionData] create_submission_data: (required)
        :return: list[CreateSubmissionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_generate_pdf_v1_with_http_info(template_id, create_submission_data, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_generate_pdf_v1_with_http_info(template_id, create_submission_data, **kwargs)  # noqa: E501
            return data

    def batch_generate_pdf_v1_with_http_info(self, template_id, create_submission_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdf_v1_with_http_info(template_id, create_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param list[CreateSubmissionData] create_submission_data: (required)
        :return: list[CreateSubmissionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id', 'create_submission_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_generate_pdf_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `batch_generate_pdf_v1`")  # noqa: E501
        # verify the required parameter 'create_submission_data' is set
        if ('create_submission_data' not in local_var_params or
                local_var_params['create_submission_data'] is None):
            raise ValueError("Missing the required parameter `create_submission_data` when calling `batch_generate_pdf_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_submission_data' in local_var_params:
            body_params = local_var_params['create_submission_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/submissions/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CreateSubmissionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_generate_pdfs(self, submission_batch_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdfs(submission_batch_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmissionBatchData submission_batch_data: (required)
        :return: CreateSubmissionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_generate_pdfs_with_http_info(submission_batch_data, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_generate_pdfs_with_http_info(submission_batch_data, **kwargs)  # noqa: E501
            return data

    def batch_generate_pdfs_with_http_info(self, submission_batch_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdfs_with_http_info(submission_batch_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmissionBatchData submission_batch_data: (required)
        :return: CreateSubmissionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_batch_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_generate_pdfs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_batch_data' is set
        if ('submission_batch_data' not in local_var_params or
                local_var_params['submission_batch_data'] is None):
            raise ValueError("Missing the required parameter `submission_batch_data` when calling `batch_generate_pdfs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'submission_batch_data' in local_var_params:
            body_params = local_var_params['submission_batch_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubmissionBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def combine_submissions(self, combined_submission_data, **kwargs):  # noqa: E501
        """Merge generated PDFs together  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_submissions(combined_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinedSubmissionData combined_submission_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.combine_submissions_with_http_info(combined_submission_data, **kwargs)  # noqa: E501
        else:
            (data) = self.combine_submissions_with_http_info(combined_submission_data, **kwargs)  # noqa: E501
            return data

    def combine_submissions_with_http_info(self, combined_submission_data, **kwargs):  # noqa: E501
        """Merge generated PDFs together  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_submissions_with_http_info(combined_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinedSubmissionData combined_submission_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method combine_submissions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_data' is set
        if ('combined_submission_data' not in local_var_params or
                local_var_params['combined_submission_data'] is None):
            raise ValueError("Missing the required parameter `combined_submission_data` when calling `combine_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'combined_submission_data' in local_var_params:
            body_params = local_var_params['combined_submission_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCombinedSubmissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expire_combined_submission(self, combined_submission_id, **kwargs):  # noqa: E501
        """Expire a combined submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_combined_submission(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
            return data

    def expire_combined_submission_with_http_info(self, combined_submission_id, **kwargs):  # noqa: E501
        """Expire a combined submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_combined_submission_with_http_info(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_combined_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in local_var_params or
                local_var_params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `expire_combined_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in local_var_params:
            path_params['combined_submission_id'] = local_var_params['combined_submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions/{combined_submission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CombinedSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expire_submission(self, submission_id, **kwargs):  # noqa: E501
        """Expire a PDF submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expire_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.expire_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def expire_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Expire a PDF submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in local_var_params or
                local_var_params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `expire_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in local_var_params:
            path_params['submission_id'] = local_var_params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/{submission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_pdf(self, template_id, create_submission_data, **kwargs):  # noqa: E501
        """Generates a new PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pdf(template_id, create_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param CreateSubmissionData create_submission_data: (required)
        :return: CreateSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_pdf_with_http_info(template_id, create_submission_data, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_pdf_with_http_info(template_id, create_submission_data, **kwargs)  # noqa: E501
            return data

    def generate_pdf_with_http_info(self, template_id, create_submission_data, **kwargs):  # noqa: E501
        """Generates a new PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pdf_with_http_info(template_id, create_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param CreateSubmissionData create_submission_data: (required)
        :return: CreateSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id', 'create_submission_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_pdf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `generate_pdf`")  # noqa: E501
        # verify the required parameter 'create_submission_data' is set
        if ('create_submission_data' not in local_var_params or
                local_var_params['create_submission_data'] is None):
            raise ValueError("Missing the required parameter `create_submission_data` when calling `generate_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_submission_data' in local_var_params:
            body_params = local_var_params['create_submission_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubmissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_combined_submission(self, combined_submission_id, **kwargs):  # noqa: E501
        """Check the status of a combined submission (merged PDFs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_combined_submission(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
            return data

    def get_combined_submission_with_http_info(self, combined_submission_id, **kwargs):  # noqa: E501
        """Check the status of a combined submission (merged PDFs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_combined_submission_with_http_info(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_combined_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in local_var_params or
                local_var_params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `get_combined_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in local_var_params:
            path_params['combined_submission_id'] = local_var_params['combined_submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions/{combined_submission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CombinedSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_submission(self, submission_id, **kwargs):  # noqa: E501
        """Check the status of a PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def get_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Check the status of a PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in local_var_params or
                local_var_params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `get_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in local_var_params:
            path_params['submission_id'] = local_var_params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/{submission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_submission_batch(self, submission_batch_id, **kwargs):  # noqa: E501
        """Check the status of a submission batch job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_batch(submission_batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_batch_id: (required)
        :param bool include_submissions:
        :return: SubmissionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_submission_batch_with_http_info(submission_batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_submission_batch_with_http_info(submission_batch_id, **kwargs)  # noqa: E501
            return data

    def get_submission_batch_with_http_info(self, submission_batch_id, **kwargs):  # noqa: E501
        """Check the status of a submission batch job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_batch_with_http_info(submission_batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_batch_id: (required)
        :param bool include_submissions:
        :return: SubmissionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_batch_id', 'include_submissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_batch_id' is set
        if ('submission_batch_id' not in local_var_params or
                local_var_params['submission_batch_id'] is None):
            raise ValueError("Missing the required parameter `submission_batch_id` when calling `get_submission_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_batch_id' in local_var_params:
            path_params['submission_batch_id'] = local_var_params['submission_batch_id']  # noqa: E501

        query_params = []
        if 'include_submissions' in local_var_params:
            query_params.append(('include_submissions', local_var_params['include_submissions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/batches/{submission_batch_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmissionBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_templates(self, **kwargs):  # noqa: E501
        """Get a list of all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_templates`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 50:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_templates`, must be a value less than or equal to `50`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `get_templates`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Template]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_authentication(self, **kwargs):  # noqa: E501
        """Test Authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_authentication(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthenticationSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_authentication_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_authentication_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_authentication_with_http_info(self, **kwargs):  # noqa: E501
        """Test Authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_authentication_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthenticationSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_authentication" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/authentication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
