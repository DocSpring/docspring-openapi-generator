# coding: utf-8

"""
    API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class PDFApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_generate_pdf(self, template_id, **kwargs):
        """
        Generates multiple PDFs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_generate_pdf(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: (required)
        :param list[CreateSubmissionBatchBody] create_submission_batch_body:
        :return: list[InlineResponse2011]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.batch_generate_pdf_with_http_info(template_id, **kwargs)
        else:
            (data) = self.batch_generate_pdf_with_http_info(template_id, **kwargs)
            return data

    def batch_generate_pdf_with_http_info(self, template_id, **kwargs):
        """
        Generates multiple PDFs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_generate_pdf_with_http_info(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: (required)
        :param list[CreateSubmissionBatchBody] create_submission_batch_body:
        :return: list[InlineResponse2011]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'create_submission_batch_body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_generate_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params) or (params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `batch_generate_pdf`")


        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_submission_batch_body' in params:
            body_params = params['create_submission_batch_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/templates/{template_id}/submissions/batch', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2011]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def combine_submissions(self, **kwargs):
        """
        Merge generated PDFs together
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.combine_submissions(async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCombinedSubmissionBody create_combined_submission_body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.combine_submissions_with_http_info(**kwargs)
        else:
            (data) = self.combine_submissions_with_http_info(**kwargs)
            return data

    def combine_submissions_with_http_info(self, **kwargs):
        """
        Merge generated PDFs together
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.combine_submissions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCombinedSubmissionBody create_combined_submission_body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_combined_submission_body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method combine_submissions" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_combined_submission_body' in params:
            body_params = params['create_combined_submission_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/combined_submissions', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def expire_combined_submission(self, combined_submission_id, **kwargs):
        """
        Expire a combined submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.expire_combined_submission(combined_submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str combined_submission_id: (required)
        :return: InlineResponse201CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)
        else:
            (data) = self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)
            return data

    def expire_combined_submission_with_http_info(self, combined_submission_id, **kwargs):
        """
        Expire a combined submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.expire_combined_submission_with_http_info(combined_submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str combined_submission_id: (required)
        :return: InlineResponse201CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['combined_submission_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_combined_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in params) or (params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `expire_combined_submission`")


        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in params:
            path_params['combined_submission_id'] = params['combined_submission_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/combined_submissions/{combined_submission_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201CombinedSubmission',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def expire_submission(self, submission_id, **kwargs):
        """
        Expire a PDF submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.expire_submission(submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str submission_id: (required)
        :return: TemplatestemplateIdsubmissionsbatchSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.expire_submission_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.expire_submission_with_http_info(submission_id, **kwargs)
            return data

    def expire_submission_with_http_info(self, submission_id, **kwargs):
        """
        Expire a PDF submission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.expire_submission_with_http_info(submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str submission_id: (required)
        :return: TemplatestemplateIdsubmissionsbatchSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `expire_submission`")


        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/submissions/{submission_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TemplatestemplateIdsubmissionsbatchSubmission',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def generate_pdf(self, template_id, **kwargs):
        """
        Generates a new PDF
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_pdf(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: (required)
        :param CreateSubmissionBody create_submission_body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generate_pdf_with_http_info(template_id, **kwargs)
        else:
            (data) = self.generate_pdf_with_http_info(template_id, **kwargs)
            return data

    def generate_pdf_with_http_info(self, template_id, **kwargs):
        """
        Generates a new PDF
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_pdf_with_http_info(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: (required)
        :param CreateSubmissionBody create_submission_body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'create_submission_body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params) or (params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `generate_pdf`")


        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_submission_body' in params:
            body_params = params['create_submission_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/templates/{template_id}/submissions', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2011',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_combined_submission(self, combined_submission_id, **kwargs):
        """
        Check the status of a combined submission (merged PDFs)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_combined_submission(combined_submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str combined_submission_id: (required)
        :return: InlineResponse201CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)
        else:
            (data) = self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)
            return data

    def get_combined_submission_with_http_info(self, combined_submission_id, **kwargs):
        """
        Check the status of a combined submission (merged PDFs)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_combined_submission_with_http_info(combined_submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str combined_submission_id: (required)
        :return: InlineResponse201CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['combined_submission_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_combined_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in params) or (params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `get_combined_submission`")


        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in params:
            path_params['combined_submission_id'] = params['combined_submission_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/combined_submissions/{combined_submission_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201CombinedSubmission',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_submission(self, submission_id, **kwargs):
        """
        Check the status of a PDF
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_submission(submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str submission_id: (required)
        :return: TemplatestemplateIdsubmissionsbatchSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_submission_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.get_submission_with_http_info(submission_id, **kwargs)
            return data

    def get_submission_with_http_info(self, submission_id, **kwargs):
        """
        Check the status of a PDF
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_submission_with_http_info(submission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str submission_id: (required)
        :return: TemplatestemplateIdsubmissionsbatchSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `get_submission`")


        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/submissions/{submission_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TemplatestemplateIdsubmissionsbatchSubmission',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_templates(self, **kwargs):
        """
        Get a list of all templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_templates(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_templates_with_http_info(**kwargs)
        else:
            (data) = self.get_templates_with_http_info(**kwargs)
            return data

    def get_templates_with_http_info(self, **kwargs):
        """
        Get a list of all templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_templates_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/templates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2001]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def test_authentication(self, **kwargs):
        """
        Test Authentication
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_authentication(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.test_authentication_with_http_info(**kwargs)
        else:
            (data) = self.test_authentication_with_http_info(**kwargs)
            return data

    def test_authentication_with_http_info(self, **kwargs):
        """
        Test Authentication
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_authentication_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_authentication" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_token_basic']

        return self.api_client.call_api('/authentication', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
