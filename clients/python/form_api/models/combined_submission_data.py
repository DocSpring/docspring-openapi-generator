# coding: utf-8

"""
    API V1

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CombinedSubmissionData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'test': 'bool',
        'submission_ids': 'list[str]',
        'metadata': 'object',
        'expires_in': 'float'
    }

    attribute_map = {
        'test': 'test',
        'submission_ids': 'submission_ids',
        'metadata': 'metadata',
        'expires_in': 'expires_in'
    }

    def __init__(self, test=None, submission_ids=None, metadata=None, expires_in=None):  # noqa: E501
        """CombinedSubmissionData - a model defined in OpenAPI"""  # noqa: E501

        self._test = None
        self._submission_ids = None
        self._metadata = None
        self._expires_in = None
        self.discriminator = None

        if test is not None:
            self.test = test
        self.submission_ids = submission_ids
        if metadata is not None:
            self.metadata = metadata
        if expires_in is not None:
            self.expires_in = expires_in

    @property
    def test(self):
        """Gets the test of this CombinedSubmissionData.  # noqa: E501


        :return: The test of this CombinedSubmissionData.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CombinedSubmissionData.


        :param test: The test of this CombinedSubmissionData.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def submission_ids(self):
        """Gets the submission_ids of this CombinedSubmissionData.  # noqa: E501


        :return: The submission_ids of this CombinedSubmissionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._submission_ids

    @submission_ids.setter
    def submission_ids(self, submission_ids):
        """Sets the submission_ids of this CombinedSubmissionData.


        :param submission_ids: The submission_ids of this CombinedSubmissionData.  # noqa: E501
        :type: list[str]
        """
        if submission_ids is None:
            raise ValueError("Invalid value for `submission_ids`, must not be `None`")  # noqa: E501

        self._submission_ids = submission_ids

    @property
    def metadata(self):
        """Gets the metadata of this CombinedSubmissionData.  # noqa: E501


        :return: The metadata of this CombinedSubmissionData.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CombinedSubmissionData.


        :param metadata: The metadata of this CombinedSubmissionData.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def expires_in(self):
        """Gets the expires_in of this CombinedSubmissionData.  # noqa: E501


        :return: The expires_in of this CombinedSubmissionData.  # noqa: E501
        :rtype: float
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this CombinedSubmissionData.


        :param expires_in: The expires_in of this CombinedSubmissionData.  # noqa: E501
        :type: float
        """

        self._expires_in = expires_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CombinedSubmissionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
