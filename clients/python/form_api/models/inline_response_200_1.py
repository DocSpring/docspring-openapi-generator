# coding: utf-8

"""
    API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'template_type': 'str',
        'public_web_form': 'bool',
        'public_submissions': 'bool',
        'expire_submissions': 'bool',
        'expire_after': 'float',
        'expiration_interval': 'str',
        'allow_additional_properties': 'bool',
        'page_dimensions': 'list[list[float]]',
        'webhook_url': 'str',
        'slack_webhook_url': 'str',
        'redirect_url': 'str',
        'blockchain_timestamp_verification': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'template_type': 'template_type',
        'public_web_form': 'public_web_form',
        'public_submissions': 'public_submissions',
        'expire_submissions': 'expire_submissions',
        'expire_after': 'expire_after',
        'expiration_interval': 'expiration_interval',
        'allow_additional_properties': 'allow_additional_properties',
        'page_dimensions': 'page_dimensions',
        'webhook_url': 'webhook_url',
        'slack_webhook_url': 'slack_webhook_url',
        'redirect_url': 'redirect_url',
        'blockchain_timestamp_verification': 'blockchain_timestamp_verification'
    }

    def __init__(self, id=None, name=None, template_type=None, public_web_form=None, public_submissions=None, expire_submissions=None, expire_after=None, expiration_interval=None, allow_additional_properties=None, page_dimensions=None, webhook_url=None, slack_webhook_url=None, redirect_url=None, blockchain_timestamp_verification=None):
        """
        InlineResponse2001 - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._template_type = None
        self._public_web_form = None
        self._public_submissions = None
        self._expire_submissions = None
        self._expire_after = None
        self._expiration_interval = None
        self._allow_additional_properties = None
        self._page_dimensions = None
        self._webhook_url = None
        self._slack_webhook_url = None
        self._redirect_url = None
        self._blockchain_timestamp_verification = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.template_type = template_type
        self.public_web_form = public_web_form
        self.public_submissions = public_submissions
        self.expire_submissions = expire_submissions
        if expire_after is not None:
          self.expire_after = expire_after
        if expiration_interval is not None:
          self.expiration_interval = expiration_interval
        self.allow_additional_properties = allow_additional_properties
        self.page_dimensions = page_dimensions
        self.webhook_url = webhook_url
        self.slack_webhook_url = slack_webhook_url
        self.redirect_url = redirect_url
        self.blockchain_timestamp_verification = blockchain_timestamp_verification

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2001.

        :return: The id of this InlineResponse2001.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2001.

        :param id: The id of this InlineResponse2001.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2001.

        :return: The name of this InlineResponse2001.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2001.

        :param name: The name of this InlineResponse2001.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def template_type(self):
        """
        Gets the template_type of this InlineResponse2001.

        :return: The template_type of this InlineResponse2001.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """
        Sets the template_type of this InlineResponse2001.

        :param template_type: The template_type of this InlineResponse2001.
        :type: str
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type

    @property
    def public_web_form(self):
        """
        Gets the public_web_form of this InlineResponse2001.

        :return: The public_web_form of this InlineResponse2001.
        :rtype: bool
        """
        return self._public_web_form

    @public_web_form.setter
    def public_web_form(self, public_web_form):
        """
        Sets the public_web_form of this InlineResponse2001.

        :param public_web_form: The public_web_form of this InlineResponse2001.
        :type: bool
        """
        if public_web_form is None:
            raise ValueError("Invalid value for `public_web_form`, must not be `None`")

        self._public_web_form = public_web_form

    @property
    def public_submissions(self):
        """
        Gets the public_submissions of this InlineResponse2001.

        :return: The public_submissions of this InlineResponse2001.
        :rtype: bool
        """
        return self._public_submissions

    @public_submissions.setter
    def public_submissions(self, public_submissions):
        """
        Sets the public_submissions of this InlineResponse2001.

        :param public_submissions: The public_submissions of this InlineResponse2001.
        :type: bool
        """
        if public_submissions is None:
            raise ValueError("Invalid value for `public_submissions`, must not be `None`")

        self._public_submissions = public_submissions

    @property
    def expire_submissions(self):
        """
        Gets the expire_submissions of this InlineResponse2001.

        :return: The expire_submissions of this InlineResponse2001.
        :rtype: bool
        """
        return self._expire_submissions

    @expire_submissions.setter
    def expire_submissions(self, expire_submissions):
        """
        Sets the expire_submissions of this InlineResponse2001.

        :param expire_submissions: The expire_submissions of this InlineResponse2001.
        :type: bool
        """
        if expire_submissions is None:
            raise ValueError("Invalid value for `expire_submissions`, must not be `None`")

        self._expire_submissions = expire_submissions

    @property
    def expire_after(self):
        """
        Gets the expire_after of this InlineResponse2001.

        :return: The expire_after of this InlineResponse2001.
        :rtype: float
        """
        return self._expire_after

    @expire_after.setter
    def expire_after(self, expire_after):
        """
        Sets the expire_after of this InlineResponse2001.

        :param expire_after: The expire_after of this InlineResponse2001.
        :type: float
        """

        self._expire_after = expire_after

    @property
    def expiration_interval(self):
        """
        Gets the expiration_interval of this InlineResponse2001.

        :return: The expiration_interval of this InlineResponse2001.
        :rtype: str
        """
        return self._expiration_interval

    @expiration_interval.setter
    def expiration_interval(self, expiration_interval):
        """
        Sets the expiration_interval of this InlineResponse2001.

        :param expiration_interval: The expiration_interval of this InlineResponse2001.
        :type: str
        """
        allowed_values = ["minutes", "hours", "days"]
        if expiration_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration_interval` ({0}), must be one of {1}"
                .format(expiration_interval, allowed_values)
            )

        self._expiration_interval = expiration_interval

    @property
    def allow_additional_properties(self):
        """
        Gets the allow_additional_properties of this InlineResponse2001.

        :return: The allow_additional_properties of this InlineResponse2001.
        :rtype: bool
        """
        return self._allow_additional_properties

    @allow_additional_properties.setter
    def allow_additional_properties(self, allow_additional_properties):
        """
        Sets the allow_additional_properties of this InlineResponse2001.

        :param allow_additional_properties: The allow_additional_properties of this InlineResponse2001.
        :type: bool
        """
        if allow_additional_properties is None:
            raise ValueError("Invalid value for `allow_additional_properties`, must not be `None`")

        self._allow_additional_properties = allow_additional_properties

    @property
    def page_dimensions(self):
        """
        Gets the page_dimensions of this InlineResponse2001.

        :return: The page_dimensions of this InlineResponse2001.
        :rtype: list[list[float]]
        """
        return self._page_dimensions

    @page_dimensions.setter
    def page_dimensions(self, page_dimensions):
        """
        Sets the page_dimensions of this InlineResponse2001.

        :param page_dimensions: The page_dimensions of this InlineResponse2001.
        :type: list[list[float]]
        """
        if page_dimensions is None:
            raise ValueError("Invalid value for `page_dimensions`, must not be `None`")

        self._page_dimensions = page_dimensions

    @property
    def webhook_url(self):
        """
        Gets the webhook_url of this InlineResponse2001.

        :return: The webhook_url of this InlineResponse2001.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """
        Sets the webhook_url of this InlineResponse2001.

        :param webhook_url: The webhook_url of this InlineResponse2001.
        :type: str
        """
        if webhook_url is None:
            raise ValueError("Invalid value for `webhook_url`, must not be `None`")

        self._webhook_url = webhook_url

    @property
    def slack_webhook_url(self):
        """
        Gets the slack_webhook_url of this InlineResponse2001.

        :return: The slack_webhook_url of this InlineResponse2001.
        :rtype: str
        """
        return self._slack_webhook_url

    @slack_webhook_url.setter
    def slack_webhook_url(self, slack_webhook_url):
        """
        Sets the slack_webhook_url of this InlineResponse2001.

        :param slack_webhook_url: The slack_webhook_url of this InlineResponse2001.
        :type: str
        """
        if slack_webhook_url is None:
            raise ValueError("Invalid value for `slack_webhook_url`, must not be `None`")

        self._slack_webhook_url = slack_webhook_url

    @property
    def redirect_url(self):
        """
        Gets the redirect_url of this InlineResponse2001.

        :return: The redirect_url of this InlineResponse2001.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """
        Sets the redirect_url of this InlineResponse2001.

        :param redirect_url: The redirect_url of this InlineResponse2001.
        :type: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")

        self._redirect_url = redirect_url

    @property
    def blockchain_timestamp_verification(self):
        """
        Gets the blockchain_timestamp_verification of this InlineResponse2001.

        :return: The blockchain_timestamp_verification of this InlineResponse2001.
        :rtype: bool
        """
        return self._blockchain_timestamp_verification

    @blockchain_timestamp_verification.setter
    def blockchain_timestamp_verification(self, blockchain_timestamp_verification):
        """
        Sets the blockchain_timestamp_verification of this InlineResponse2001.

        :param blockchain_timestamp_verification: The blockchain_timestamp_verification of this InlineResponse2001.
        :type: bool
        """
        if blockchain_timestamp_verification is None:
            raise ValueError("Invalid value for `blockchain_timestamp_verification`, must not be `None`")

        self._blockchain_timestamp_verification = blockchain_timestamp_verification

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
